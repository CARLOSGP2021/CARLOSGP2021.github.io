<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>卡卡成长汇聚阿豹</title><subtitle>这是通过Chirpy主题配置而成的</subtitle> <updated>2022-06-27T07:18:01+00:00</updated> <author> <name>CARLOSGP2021</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 CARLOSGP2021 </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>宝藏资源</title><link href="/posts/%E5%AE%9D%E8%97%8F%E8%B5%84%E6%BA%90/" rel="alternate" type="text/html" title="宝藏资源" /><published>2022-06-27T02:34:00+00:00</published> <updated>2022-06-27T02:34:00+00:00</updated> <id>/posts/%E5%AE%9D%E8%97%8F%E8%B5%84%E6%BA%90/</id> <content src="/posts/%E5%AE%9D%E8%97%8F%E8%B5%84%E6%BA%90/" /> <author> <name>卡卡成长汇聚阿豹</name> </author> <category term="算法刷题" /> <summary> 常用网站 阿秀的求职笔记 (interviewguide.cn) 小林coding (xiaolincoding.com) 代码随想录 (programmercarl.com) labuladong 的算法小抄 技术&amp;amp;面经 [图文 C++后台开发学习路线 (qq.com)](https://mp.weixin.qq.com/s/ICwiIhxJj9b1W5C0GkG5hQ) 陈同学面经合集 (qq.com) 技术面试复习大纲！ (qq.com) 拒绝BAT等大厂SP、SSP offer，最终选择了华为，关于C++，我是这么学习的！ (qq.com) 八股文背诵版合集 (qq.com) inter... </summary> </entry> <entry><title>关注</title><link href="/posts/%E5%85%B3%E6%B3%A8/" rel="alternate" type="text/html" title="关注" /><published>2022-06-27T02:34:00+00:00</published> <updated>2022-06-27T07:17:50+00:00</updated> <id>/posts/%E5%85%B3%E6%B3%A8/</id> <content src="/posts/%E5%85%B3%E6%B3%A8/" /> <author> <name>卡卡成长汇聚阿豹</name> </author> <category term="资源" /> <summary> 互联网公司 偷偷盘点一下各大公司的实习薪资 (qq.com) 互联网大厂校招研发薪资汇总 (qq.com) 22届互联网校招研发薪资汇总 (qq.com) Top10大厂的应届生薪资有多高… (qq.com) 2022 年校招，最值得加入的互联网公司有哪些？ - 知乎 (zhihu.com) 各大互联网公司的核心部门都有什么？一文全知道！_资源分享_牛客网 (nowcoder.com) 国内游戏公司就业怎么选_职业发展_牛客网 (nowcoder.com) 国内知名的游戏公司有哪些？_职业发展_牛客网 (nowcoder.com) 实习&amp;amp;校招 聊聊如何找实习，写简历，为秋招做准备 (shimo.im) ... </summary> </entry> <entry><title>一、二叉树</title><link href="/posts/%E4%B8%80-%E4%BA%8C%E5%8F%89%E6%A0%91/" rel="alternate" type="text/html" title="一、二叉树" /><published>2022-06-27T02:34:00+00:00</published> <updated>2022-06-27T02:34:00+00:00</updated> <id>/posts/%E4%B8%80-%E4%BA%8C%E5%8F%89%E6%A0%91/</id> <content src="/posts/%E4%B8%80-%E4%BA%8C%E5%8F%89%E6%A0%91/" /> <author> <name>卡卡成长汇聚阿豹</name> </author> <category term="算法刷题" /> <summary> 解题方法 1️⃣ 遇到二叉树的题目，如何去思考？或者说有没有思考的框架呢？ 是否可以通过遍历一遍二叉树得到答案？如果可以，用一个 traverse 函数配合外部变量来实现，这叫「遍历」的思维模式。 是否可以定义一个递归函数，通过子问题（子树）的答案推导出原问题的答案？如果可以，写出这个递归函数的定义，并充分利用这个函数的返回值，这叫「分解问题」的思维模式。 无论使用哪种思维模式，你都需要思考： 如果单独抽出一个二叉树节点，它需要做什么事情？需要在什么时候（前/中/后序位置）做？其他的节点不用你操心，递归函数会帮你在所有节点上执行相同的操作。 2️⃣ 如何正确地理解前中后序遍历呢？ 前中后序是遍历二叉树过程中处理每一个节点的三个特殊时间点，绝不仅仅是三个顺序不同的 List： 前序位置的代码在刚刚进入一个二叉树节点的时候执... </summary> </entry> <entry><title>二、链表</title><link href="/posts/%E4%BA%8C-%E9%93%BE%E8%A1%A8/" rel="alternate" type="text/html" title="二、链表" /><published>2022-06-26T02:34:00+00:00</published> <updated>2022-06-27T06:58:21+00:00</updated> <id>/posts/%E4%BA%8C-%E9%93%BE%E8%A1%A8/</id> <content src="/posts/%E4%BA%8C-%E9%93%BE%E8%A1%A8/" /> <author> <name>卡卡成长汇聚阿豹</name> </author> <category term="算法刷题" /> <summary> 合并链表 21、合并两个有序链表 将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 示例： 输入：l1 = [1,2,4], l2 = [1,3,4] 输出：[1,1,2,3,4,4] 用指针分别访问两个链表，根据题意比较节点的大小，赋值到新的链表。 这个算法的逻辑类似于「拉拉链」，l1, l2 类似于拉链两侧的锯齿，指针 p 就好像拉链的拉索，将两个有序链表合并。合并后 list1 和 list2 最多只有一个还未被合并完，我们直接将链表末尾指向未合并完的链表即可。 代码中还用到一个链表的算法题中是很常见的「虚拟头结点」技巧，也就是 dummy 节点，它相当于是个占位符，可以避免处理空指针的情况，降低代码的复杂性。 struct ListNode{ int val; ListNode* nex... </summary> </entry> <entry><title>三、数组</title><link href="/posts/%E4%B8%89-%E6%95%B0%E7%BB%84/" rel="alternate" type="text/html" title="三、数组" /><published>2022-06-26T02:34:00+00:00</published> <updated>2022-06-27T07:10:18+00:00</updated> <id>/posts/%E4%B8%89-%E6%95%B0%E7%BB%84/</id> <content src="/posts/%E4%B8%89-%E6%95%B0%E7%BB%84/" /> <author> <name>卡卡成长汇聚阿豹</name> </author> <category term="算法刷题" /> <summary> 双指针 26. 删除有序数组中的重复项 给你一个 升序排列 的数组 nums ，请你原地删除重复出现的元素，使每个元素只出现一次 ，返回删除后数组的新长度。元素的相对顺序 应该保持 一致 。 示例： 输入：nums = [1,1,2] 输出：2, nums = [1,2,_] 解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。 有序序列去重的通用解法就是我们前文 双指针技巧 中的快慢指针技巧。 让慢指针 slow 走在后面，快指针 fast 走在前面探路，找到一个不重复的元素就告诉 slow 并让 slow 前进一步。这样当 fast 指针遍历完整个数组 nums 后，nums[0..slow] 就是不重复元素。 class Solution { public: int remove... </summary> </entry> </feed>
